// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package email_connector.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import email_connector.proxies.EmailTemplate;
import email_connector.proxies.constants.Constants;
import mxmodelreflection.proxies.MxObjectMember;
import mxmodelreflection.proxies.MxObjectReference;
import mxmodelreflection.proxies.MxObjectType;
import mxmodelreflection.proxies.Token;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class DeleteDuplicateMxReflectionObject extends CustomJavaAction<java.lang.Void>
{
	/** @deprecated use com.mendix.utils.ListUtils.map(TokenList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __TokenList;
	private final java.util.List<mxmodelreflection.proxies.Token> TokenList;
	/** @deprecated use com.mendix.utils.ListUtils.map(MxObjectMemberList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __MxObjectMemberList;
	private final java.util.List<mxmodelreflection.proxies.MxObjectMember> MxObjectMemberList;
	/** @deprecated use com.mendix.utils.ListUtils.map(MxObjectReferenceList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __MxObjectReferenceList;
	private final java.util.List<mxmodelreflection.proxies.MxObjectReference> MxObjectReferenceList;
	/** @deprecated use com.mendix.utils.ListUtils.map(MxObjectTypeList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __MxObjectTypeList;
	private final java.util.List<mxmodelreflection.proxies.MxObjectType> MxObjectTypeList;
	/** @deprecated use com.mendix.utils.ListUtils.map(EmailTemplateList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __EmailTemplateList;
	private final java.util.List<email_connector.proxies.EmailTemplate> EmailTemplateList;

	public DeleteDuplicateMxReflectionObject(
		IContext context,
		java.util.List<IMendixObject> _tokenList,
		java.util.List<IMendixObject> _mxObjectMemberList,
		java.util.List<IMendixObject> _mxObjectReferenceList,
		java.util.List<IMendixObject> _mxObjectTypeList,
		java.util.List<IMendixObject> _emailTemplateList
	)
	{
		super(context);
		this.__TokenList = _tokenList;
		this.TokenList = java.util.Optional.ofNullable(_tokenList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(tokenListElement -> mxmodelreflection.proxies.Token.initialize(getContext(), tokenListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__MxObjectMemberList = _mxObjectMemberList;
		this.MxObjectMemberList = java.util.Optional.ofNullable(_mxObjectMemberList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(mxObjectMemberListElement -> mxmodelreflection.proxies.MxObjectMember.initialize(getContext(), mxObjectMemberListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__MxObjectReferenceList = _mxObjectReferenceList;
		this.MxObjectReferenceList = java.util.Optional.ofNullable(_mxObjectReferenceList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(mxObjectReferenceListElement -> mxmodelreflection.proxies.MxObjectReference.initialize(getContext(), mxObjectReferenceListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__MxObjectTypeList = _mxObjectTypeList;
		this.MxObjectTypeList = java.util.Optional.ofNullable(_mxObjectTypeList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(mxObjectTypeListElement -> mxmodelreflection.proxies.MxObjectType.initialize(getContext(), mxObjectTypeListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__EmailTemplateList = _emailTemplateList;
		this.EmailTemplateList = java.util.Optional.ofNullable(_emailTemplateList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(emailTemplateListElement -> email_connector.proxies.EmailTemplate.initialize(getContext(), emailTemplateListElement))
			.collect(java.util.stream.Collectors.toList());
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		int mxObjectMemberDuplicateCount = 0;
		int mxObjectReferenceDuplicateCount = 0;
		int mxObjectTypeDuplicateCount = 0;
		if (!this.MxObjectMemberList.isEmpty()) {
			List<MxObjectMember> duplicateMxObjectMemberList = filterDuplicates(this.MxObjectMemberList, MxObjectMember::getCompleteName);
			if (!duplicateMxObjectMemberList.isEmpty()) {
				List<IMendixObject> mxObjectMemberIMendixObjectList = sortAndMapToMendixObjects(duplicateMxObjectMemberList, MxObjectMember::getMendixObject);
				List<IMendixObject> mxObjectMemberOriginalList = new ArrayList<>();
				// Process tokens
				for (IMendixObject token : this.__TokenList) {
					processTokenAndEmailTemplates(mxObjectMemberIMendixObjectList, token, Token.MemberNames.Token_MxObjectMember.toString(), MxObjectMember.MemberNames.CompleteName.toString(), mxObjectMemberOriginalList);
					Core.commit(this.getContext(), token);
				}
				// Remove original objects from list of all duplicates
				mxObjectMemberIMendixObjectList.removeAll(mxObjectMemberOriginalList);
				mxObjectMemberDuplicateCount = mxObjectMemberIMendixObjectList.size();
				// Delete objects which are created due to duplication of templates
				Core.delete(this.getContext(), mxObjectMemberIMendixObjectList);
			}
		}
		if (!this.MxObjectReferenceList.isEmpty()) {
			List<MxObjectReference> duplicateMxObjectReferenceList = filterMxObjectReferenceDuplicates(this.MxObjectReferenceList, MxObjectReference::getCompleteName, MxObjectReference::getParentEntity);
			if (!duplicateMxObjectReferenceList.isEmpty()) {
				List<IMendixObject> mxObjectReferenceIMendixObjectList = sortAndMapToMendixObjects(duplicateMxObjectReferenceList, MxObjectReference::getMendixObject);
				List<IMendixObject> mxObjectReferenceOriginalList = new ArrayList<>();
				// Process tokens
				for (IMendixObject token : this.__TokenList) {
					processTokenAndEmailTemplates(mxObjectReferenceIMendixObjectList, token, Token.MemberNames.Token_MxObjectReference.toString(), MxObjectReference.MemberNames.CompleteName.toString(), mxObjectReferenceOriginalList);
					Core.commit(this.getContext(), token);
				}
				// Remove original objects from list of all duplicates
				mxObjectReferenceIMendixObjectList.removeAll(mxObjectReferenceOriginalList);
				mxObjectReferenceDuplicateCount = mxObjectReferenceIMendixObjectList.size();
				// Delete objects which are created due to duplication of templates
				Core.delete(this.getContext(), mxObjectReferenceIMendixObjectList);
			}
		}

		if (!this.MxObjectTypeList.isEmpty()) {
			List<MxObjectType> duplicateMxObjectTypeList = filterDuplicates(this.MxObjectTypeList, MxObjectType::getCompleteName);
			if (!duplicateMxObjectTypeList.isEmpty()) {
				List<IMendixObject> mxObjectTypeIMendixObjectList = sortAndMapToMendixObjects(duplicateMxObjectTypeList, MxObjectType::getMendixObject);
				List<IMendixObject> mxObjectTypeOriginalList = new ArrayList<>();
				// Process tokens
				for (IMendixObject token : this.__TokenList) {
					processTokenAndEmailTemplates(mxObjectTypeIMendixObjectList, token, Token.MemberNames.Token_MxObjectType_Start.toString(), MxObjectType.MemberNames.CompleteName.toString(), mxObjectTypeOriginalList);
					processTokenAndEmailTemplates(mxObjectTypeIMendixObjectList, token, Token.MemberNames.Token_MxObjectType_Referenced.toString(), MxObjectType.MemberNames.CompleteName.toString(), mxObjectTypeOriginalList);
					Core.commit(this.getContext(), token);
				}
				// Process email templates
				for (IMendixObject emailTemplate : this.__EmailTemplateList) {
					processTokenAndEmailTemplates(mxObjectTypeIMendixObjectList, emailTemplate, EmailTemplate.MemberNames.EmailTemplate_MxObjectType.toString(), MxObjectType.MemberNames.CompleteName.toString(), mxObjectTypeOriginalList);
					Core.commit(this.getContext(), emailTemplate);
				}
				// Remove original objects from list of all duplicates
				mxObjectTypeIMendixObjectList.removeAll(mxObjectTypeOriginalList);
				mxObjectTypeDuplicateCount = mxObjectTypeIMendixObjectList.size();
				// Delete objects which are created due to duplication of templates
				Core.delete(this.getContext(), mxObjectTypeIMendixObjectList);
			}
		}
		Core.getLogger(Constants.getLogNode()).info(String.format("Successfully deleted %d record(s) from entity '%s'.", mxObjectMemberDuplicateCount, "MxObjectMember"));
		Core.getLogger(Constants.getLogNode()).info(String.format("Successfully deleted %d record(s) from entity '%s'.", mxObjectReferenceDuplicateCount, "MxObjectReference"));
		Core.getLogger(Constants.getLogNode()).info(String.format("Successfully deleted %d record(s) from entity '%s'.", mxObjectTypeDuplicateCount, "MxObjectType"));
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeleteDuplicateMxReflectionObject";
	}

	// BEGIN EXTRA CODE
	private <T> List<T> filterDuplicates(List<T> list, Function<T, String> getCompleteName) {
        return list.stream()
                .collect(Collectors.groupingBy(getCompleteName))
                .values().stream()
                .filter(l -> l.size() > 1)
                .flatMap(List::stream)
                .collect(Collectors.toList());
    }

	private List<MxObjectReference> filterMxObjectReferenceDuplicates(List<MxObjectReference> list, Function<MxObjectReference, String> getCompleteName, Function<MxObjectReference, String> getParentEntity) {
		return list.stream()
				.collect(Collectors.groupingBy(getCompleteName, Collectors.groupingBy(getParentEntity, Collectors.toList())))
				.values().stream()
				.flatMap(map -> map.values().stream())
				.filter(l -> l.size() > 1)
				.flatMap(List::stream)
				.collect(Collectors.toList());
	}

	private <T> List<IMendixObject> sortAndMapToMendixObjects(List<T> list, Function<T, IMendixObject> getMendixObject) {
        return list.stream()
                .map(getMendixObject)
                .sorted(Comparator.comparingLong(obj -> obj.getId().toLong()))
                .collect(Collectors.toList());
    }

    private void processTokenAndEmailTemplates(List<IMendixObject> duplicateMendixObjectsList, IMendixObject mendixObject, String referenceName, String completeNameReference, List<IMendixObject> originalList) throws CoreException {
        IMendixIdentifier mxIdentifier = mendixObject.getValue(this.getContext(), referenceName);
        if (mxIdentifier != null) {
            IMendixObject object = Core.retrieveId(this.getContext(), mxIdentifier);
            for (IMendixObject duplicateMxObject : duplicateMendixObjectsList) {
                if (duplicateMxObject.getValue(this.getContext(), completeNameReference).equals(object.getValue(this.getContext(), completeNameReference))) {
                    mendixObject.setValue(this.getContext(), referenceName, duplicateMxObject.getId());
                    if(!originalList.contains(duplicateMxObject)) {
						originalList.add(duplicateMxObject);
					}
                    break;
                }
            }
        }
    }
	// END EXTRA CODE
}
